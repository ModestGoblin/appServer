<?xml version="1.0" encoding="ISO-8859-1"?>
<!-- OPML generated by OPML Editor v10.1b19 on Sun, 31 Jan 2021 22:40:44 GMT -->
<opml version="2.0">
	<head>
		<title>nodeEditor: daveappserver</title>
		<dateCreated>Thu, 26 Nov 2020 19:41:01 GMT</dateCreated>
		<dateModified>Sun, 31 Jan 2021 22:40:44 GMT</dateModified>
		<ownerName>Dave Winer</ownerName>
		<ownerId>http://davewiner.com/</ownerId>
		<expansionState>1, 2, 3, 13, 53, 57, 82, 84, 85, 91, 92, 93, 95, 116, 117, 118, 131, 132, 142, 153, 156, 157, 159, 164, 165, 167, 172, 173, 174, 177, 184, 185, 189, 192, 196, 197, 202, 209, 210, 211, 212, 214, 215, 217, 218, 220, 244</expansionState>
		<vertScrollState>1</vertScrollState>
		<windowTop>132</windowTop>
		<windowLeft>614</windowLeft>
		<windowBottom>1170</windowBottom>
		<windowRight>1900</windowRight>
		</head>
	<body>
		<outline text="/scripting.com/code/daveappserver/">
			<outline text="package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;daveappserver&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Factored code that was appearing in all my servers.&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.5.3&quot;,"/>
					<outline text="&quot;main&quot;: &quot;appserver.js&quot;,"/>
					<outline text="&quot;repository&quot;: {">
						<outline text="&quot;type&quot; : &quot;git&quot;,"/>
						<outline text="&quot;url&quot; : &quot;https://github.com/scripting/appServer&quot;"/>
						<outline text="},"/>
						</outline>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;files&quot;: [">
						<outline text="&quot;appserver.js&quot;"/>
						<outline text="],"/>
						</outline>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;request&quot;: &quot;*&quot;,"/>
						<outline text="&quot;nodejs-websocket&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davefilesystem&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davetwitter&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davehttp&quot;: &quot;*&quot;"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="appserver.js">
				<outline text="var myVersion = &quot;0.5.3&quot;, myProductName = &quot;daveAppServer&quot;;" created="Mon, 03 Feb 2014 03:21:03 GMT" pgfnum="36831"/>
				<outline text=""/>
				<outline text="exports.start = startup; "/>
				<outline text="exports.notifySocketSubscribers = notifySocketSubscribers;"/>
				<outline text="exports.saveStats = saveStats;"/>
				<outline text="exports.getConfig = getConfig;"/>
				<outline text=""/>
				<outline text="const fs = require (&quot;fs&quot;);"/>
				<outline text="var dns = require (&quot;dns&quot;);"/>
				<outline text="var os = require (&quot;os&quot;);"/>
				<outline text="const request = require (&quot;request&quot;);"/>
				<outline text="const websocket = require (&quot;nodejs-websocket&quot;); "/>
				<outline text="const utils = require (&quot;daveutils&quot;);"/>
				<outline text="const davehttp = require (&quot;davehttp&quot;);"/>
				<outline text="const davetwitter = require (&quot;davetwitter&quot;);"/>
				<outline text="const filesystem = require (&quot;davefilesystem&quot;); "/>
				<outline text="const davesql = require (&quot;davesql&quot;);" isComment="true"/>
				<outline text="const opmlToJs = require (&quot;opmltojs&quot;);" isComment="true"/>
				<outline text="const rss = require (&quot;daverss&quot;);" isComment="true"/>
				<outline text="const s3 = require (&quot;daves3&quot;); " isComment="true"/>
				<outline text=""/>
				<outline text="const whenStart = new Date ();"/>
				<outline text=""/>
				<outline text="var config = {">
					<outline text="productName: &quot;randomApp&quot;,"/>
					<outline text="productNameForDisplay: &quot;Random App&quot;,"/>
					<outline text="version: myVersion,"/>
					<outline text="prefsPath: &quot;prefs.json&quot;,"/>
					<outline text="docsPath: &quot;myDocs/&quot;,"/>
					<outline text="flLogToConsole: true,"/>
					<outline text="port: process.env.PORT || 1420,"/>
					<outline text="websocketPort: 1422,"/>
					<outline text="flAllowAccessFromAnywhere: true,"/>
					<outline text="flPostEnabled: true, //12/21/20 by DW"/>
					<outline text="flWebsocketEnabled: true,"/>
					<outline text="urlServerForClient: &quot;http://tagserver.opml.org/&quot;,"/>
					<outline text="urlWebsocketServerForClient: &quot;ws://tagserver.opml.org:1422/&quot;,"/>
					<outline text="flEnableLogin: true, //user can log in via twitter"/>
					<outline text="blockedAddresses: [], "/>
					<outline text="flForceTwitterLogin: true,"/>
					<outline text=""/>
					<outline text="flStorageEnabled: true,"/>
					<outline text="privateFilesPath: &quot;privateFiles/users/&quot;,"/>
					<outline text="publicFilesPath: &quot;publicFiles/users/&quot;"/>
					<outline text="};"/>
					</outline>
				<outline text="const fnameConfig = &quot;config.json&quot;;"/>
				<outline text=""/>
				<outline text="var stats = {">
					<outline text="whenFirstStart: whenStart, ctStarts: 0,"/>
					<outline text="whenLastStart: undefined,"/>
					<outline text="ctWrites: 0,"/>
					<outline text="ctHits: 0, ctHitsToday: 0, ctHitsThisRun:0, "/>
					<outline text="whenLastHit: new Date (0)"/>
					<outline text="};"/>
					</outline>
				<outline text="const fnameStats = &quot;stats.json&quot;;"/>
				<outline text=""/>
				<outline text="function statsChanged () {">
					<outline text="flStatsChanged = true;"/>
					<outline text="}"/>
					</outline>
				<outline text="function saveStats (theStats) {">
					<outline text="for (var x in theStats) {">
						<outline text="stats [x] = theStats [x];"/>
						<outline text="}"/>
						</outline>
					<outline text="statsChanged ();"/>
					<outline text="}"/>
					</outline>
				<outline text="function getConfig () {">
					<outline text="return (config);"/>
					<outline text="}"/>
					</outline>
				<outline text="function httpReadUrl (url, callback) {" created="Mon, 20 Jan 2014 17:26:34 GMT" pgfnum="36035">
					<outline text="request (url, function (err, response, data) {">
						<outline text="if (err) {">
							<outline text="callback (err);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="if (response.statusCode != 200) {">
								<outline text="const errstruct = {">
									<outline text="message: &quot;Can't read the URL, \&quot;&quot; + url + &quot;\&quot; because we received a status code of &quot; + response.statusCode + &quot;.&quot;,"/>
									<outline text="statusCode: response.statusCode"/>
									<outline text="};"/>
									</outline>
								<outline text="callback (errstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="callback (undefined, data);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}" created="Mon, 20 Jan 2014 17:26:49 GMT" pgfnum="36038"/>
					</outline>
				<outline text="function checkPathForIllegalChars (path) {">
					<outline text="Changes" isComment="true">
						<outline text="5/10/15; 7:08:13 PM by DW">
							<outline text="* is legal."/>
							</outline>
						</outline>
					<outline text="function isIllegal (ch) {">
						<outline text="if (utils.isAlpha (ch) || utils.isNumeric (ch)) {">
							<outline text="return (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="switch (ch) {">
							<outline text="case &quot;/&quot;: case &quot;_&quot;: case &quot;-&quot;: case &quot;.&quot;:  case &quot; &quot;: case &quot;*&quot;:">
								<outline text="return (false);"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (true);"/>
						<outline text="}"/>
						</outline>
					<outline text="for (var i = 0; i &lt; path.length; i++) {">
						<outline text="if (isIllegal (path [i])) {">
							<outline text="return (false);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="if (utils.stringContains (path, &quot;./&quot;)) {">
						<outline text="return (false);"/>
						<outline text="}"/>
						</outline>
					<outline text="return (true);"/>
					<outline text="}"/>
					</outline>
				<outline text="function getDomainName (clientIp, callback) { //11/14/15 by DW">
					<outline text="if (clientIp === undefined) {">
						<outline text="if (callback !== undefined) {">
							<outline text="callback (&quot;undefined&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="else {">
						<outline text="dns.reverse (clientIp, function (err, domains) {">
							<outline text="var name = clientIp;"/>
							<outline text="if (!err) {">
								<outline text="if (domains.length &gt; 0) {">
									<outline text="name = domains [0];"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="if (callback !== undefined) {">
								<outline text="callback (name);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text=""/>
				<outline text="//sockets">
					<outline text="var theWsServer = undefined;"/>
					<outline text=""/>
					<outline text="function notifySocketSubscribers (verb, jstruct) {">
						<outline text="if (theWsServer !== undefined) {">
							<outline text="var ctUpdates = 0, now = new Date (), jsontext = &quot;&quot;;"/>
							<outline text="if (jstruct !== undefined) { ">
								<outline text="jsontext = utils.jsonStringify (jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="theWsServer.connections.forEach (function (conn, ix) {">
								<outline text="if (conn.appData !== undefined) { //it's one of ours">
									<outline text="try {">
										<outline text="conn.sendText (verb + &quot;\r&quot; + jsontext);"/>
										<outline text="conn.appData.whenLastUpdate = now;"/>
										<outline text="conn.appData.ctUpdates++;"/>
										<outline text="ctUpdates++;"/>
										<outline text="}"/>
										</outline>
									<outline text="catch (err) {">
										<outline text="console.log (&quot;notifySocketSubscribers: socket #&quot; + i + &quot;: error updating&quot;);"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="if (ctUpdates &gt; 0) {">
								<outline text="console.log (&quot;\nnotifySocketSubscribers: &quot; + ctUpdates + &quot; sockets were updated.\n&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function checkWebSocketCalls () { //expire timed-out calls">
						<outline text="}"/>
						</outline>
					<outline text="function countOpenSockets () {">
						<outline text="if (theWsServer === undefined) { //12/18/15 by DW">
							<outline text="return (0);"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="return (theWsServer.connections.length);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getOpenSocketsArray () { //return an array with data about open sockets">
						<outline text="var theArray = new Array ();"/>
						<outline text="theWsServer.connections.forEach (function (conn, ix) {">
							<outline text="if (conn.appData !== undefined) { //it's one of ours">
								<outline text="theArray.push ({">
									<outline text="arrayIndex: ix,"/>
									<outline text="lastVerb: conn.appData.lastVerb,"/>
									<outline text="urlToWatch: conn.appData.urlToWatch,"/>
									<outline text="domain: conn.appData.domain,"/>
									<outline text="whenStarted: utils.viewDate (conn.appData.whenStarted),"/>
									<outline text="whenLastUpdate: utils.viewDate (conn.appData.whenLastUpdate)"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="return (theArray);"/>
						<outline text="" isComment="true"/>
						<outline text="for (var i = 0; i &lt; theWsServer.connections.length; i++) {" isComment="true">
							<outline text="var conn = theWsServer.connections [i];"/>
							<outline text="if (conn.chatLogData !== undefined) { //it's one of ours">
								<outline text="theArray [theArray.length] = {">
									<outline text="arrayIndex: i,"/>
									<outline text="lastVerb: conn.chatLogData.lastVerb,"/>
									<outline text="urlToWatch: conn.chatLogData.urlToWatch,"/>
									<outline text="domain: conn.chatLogData.domain,"/>
									<outline text="whenStarted: utils.viewDate (conn.chatLogData.whenStarted),"/>
									<outline text="whenLastUpdate: utils.viewDate (conn.chatLogData.whenLastUpdate)"/>
									<outline text="};"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function handleWebSocketConnection (conn) { ">
						<outline text="var now = new Date ();"/>
						<outline text="conn.appData = { //initialize">
							<outline text="whenStarted: now,"/>
							<outline text="ctUpdates: 0,"/>
							<outline text="whenLastUpdate: new Date (0),"/>
							<outline text="lastVerb: undefined,"/>
							<outline text="urlToWatch: undefined,"/>
							<outline text="domain: undefined"/>
							<outline text="};"/>
							</outline>
						<outline text=""/>
						<outline text="function logToConsole (conn, verb, value) {">
							<outline text="getDomainName (conn.socket.remoteAddress, function (theName) { //log the request">
								<outline text="var freemem = utils.gigabyteString (os.freemem ()), method = &quot;WS:&quot; + verb, now = new Date (); "/>
								<outline text="if (theName === undefined) {">
									<outline text="theName = conn.socket.remoteAddress;"/>
									<outline text="}"/>
									</outline>
								<outline text="console.log (now.toLocaleTimeString () + &quot; &quot; + freemem + &quot; &quot; + method + &quot; &quot; + value + &quot; &quot; + theName);"/>
								<outline text="conn.appData.domain = theName; "/>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="conn.on (&quot;text&quot;, function (s) {">
							<outline text="var words = s.split (&quot; &quot;);"/>
							<outline text="if (words.length &gt; 1) { //new protocol as of 11/29/15 by DW">
								<outline text="conn.appData.whenLastUpdate = now;"/>
								<outline text="conn.appData.lastVerb = words [0];"/>
								<outline text="switch (words [0]) {">
									<outline text="case &quot;watch&quot;:">
										<outline text="conn.appData.urlToWatch = utils.trimWhitespace (words [1]);"/>
										<outline text="logToConsole (conn, conn.appData.lastVerb, conn.appData.urlToWatch);"/>
										<outline text="break;"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="conn.close ();"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="conn.on (&quot;close&quot;, function () {">
							<outline text="console.log (&quot;'close' message received.&quot;);" isComment="true"/>
							<outline text="});"/>
							</outline>
						<outline text="conn.on (&quot;error&quot;, function (err) {">
							<outline text="logToConsole (conn, &quot;error&quot;, err.code);" isComment="true"/>
							<outline text="conn.close (); //11/30/15 by DW -- https://github.com/scripting/betterWebSocketsDemo/issues/2#issuecomment-160658118" isComment="true"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function webSocketStartup () {">
						<outline text="if (config.flWebsocketEnabled) {">
							<outline text="try {">
								<outline text="theWsServer = websocket.createServer (handleWebSocketConnection);"/>
								<outline text="theWsServer = websocket.createServer (function (conn) {" isComment="true">
									<outline text="conn.bingeworthyData = {">
										<outline text="whenLastUpdate: new Date (0),"/>
										<outline text="ctUpdates: 0"/>
										<outline text="};"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="console.log (&quot;webSocketStartup: config.websocketPort == &quot; + config.websocketPort);"/>
								<outline text="theWsServer.listen (config.websocketPort);"/>
								<outline text="}"/>
								</outline>
							<outline text="catch (err) {">
								<outline text="console.log (&quot;webSocketStartup: err.message == &quot; + err.message);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text="//storage functions">
					<outline text="function getFilePath (screenname, relpath, flprivate) {">
						<outline text="const folder = (flprivate) ? config.privateFilesPath : config.publicFilesPath;"/>
						<outline text="const f = folder + screenname + &quot;/&quot; + relpath;"/>
						<outline text="return (f);"/>
						<outline text="}"/>
						</outline>
					<outline text="function publishFile (screenname, relpath, type, flprivate, filetext, callback) {">
						<outline text="if (config.flStorageEnabled) {">
							<outline text="var f = getFilePath (screenname, relpath, flprivate);"/>
							<outline text="utils.sureFilePath (f, function () {">
								<outline text="var now = new Date ();"/>
								<outline text="fs.writeFile (f, filetext, function (err) {">
									<outline text="if (err) {">
										<outline text="callback (err);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="var url = (flprivate) ? undefined : config.urlServerForClient + screenname + &quot;/&quot; + relpath;"/>
										<outline text="if (!flprivate) {">
											<outline text="notifySocketSubscribers (&quot;update&quot;, filetext);"/>
											<outline text="}"/>
											</outline>
										<outline text="callback (undefined, {">
											<outline text="url,"/>
											<outline text="whenLastUpdate: now"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback ({message: &quot;Can't publish the file because the feature is not enabled on the server.&quot;});"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getFile (screenname, relpath, flprivate, callback) {">
						<outline text="Changes" isComment="true">
							<outline text="7/28/15; 4:14:27 PM by DW">
								<outline text="Cribbed from storage.getObject in nodeStorage. "/>
								<outline text="On an error, if the code is ENOENT, we change it to the code that S3 would return, NoSuchKey. This is what the API is looking for, because in some circumstances this is not an error. For example the first time the app launches, and we're trying to get the user's appPrefs.json file. If it doesn't exist, we create one. "/>
								</outline>
							</outline>
						<outline text="if (config.flStorageEnabled) {">
							<outline text="var f = getFilePath (screenname, relpath, flprivate);"/>
							<outline text="fs.readFile (f, function (err, filetext) {">
								<outline text="if (err) {">
									<outline text="if (err.code == &quot;ENOENT&quot;) {">
										<outline text="err.status = 500;"/>
										<outline text="err.code = &quot;NoSuchKey&quot;;"/>
										<outline text="}"/>
										</outline>
									<outline text="callback (err);"/>
									<outline text="}"/>
									</outline>
								<outline text="else {">
									<outline text="callback (undefined, {filedata: filetext.toString ()});"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="callback ({message: &quot;Can't publish the file because the feature is not enabled on the server.&quot;});"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function getFileList (screenname, flprivate, callback) {">
						<outline text="var folder = getFilePath (screenname, &quot;&quot;, flprivate);"/>
						<outline text="filesystem.getFolderInfo (folder, function (theList) {">
							<outline text="var returnedList = new Array ();"/>
							<outline text="theList.forEach (function (item) {">
								<outline text="var fname = utils.stringLastField (item.f, &quot;/&quot;);"/>
								<outline text="if (fname != &quot;.DS_Store&quot;) {">
									<outline text="returnedList.push ({">
										<outline text="path: utils.stringDelete (item.f, 1, folder.length),"/>
										<outline text="whenLastChange: item.whenModified,"/>
										<outline text="whenCreated: item.whenCreated,"/>
										<outline text="ctChars: item.size"/>
										<outline text="});"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="console.log (&quot;getFileList: folder == &quot; + folder + &quot;, returnedList == &quot; + utils.jsonStringify (returnedList));"/>
							<outline text="if (callback != undefined) {">
								<outline text="callback (undefined, returnedList);"/>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					</outline>
				<outline text=""/>
				<outline text="function startup (options, callback) {">
					<outline text="Changes" isComment="true">
						<outline text="1/22/21; 11:19:04 AM by DW">
							<outline text="At start, copy scalars from options to config."/>
							</outline>
						</outline>
					<outline text="function readConfig (f, theConfig, flReportError, callback) { ">
						<outline text="Changes" isComment="true">
							<outline text="1/21/21; 12:35:00 PM by DW">
								<outline text="New param, flReportError."/>
								</outline>
							</outline>
						<outline text="fs.readFile (f, function (err, jsontext) {">
							<outline text="if (err) {">
								<outline text="if (flReportError) { //1/21/21 by DW">
									<outline text="console.log (&quot;readConfig: err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="try {">
									<outline text="var jstruct = JSON.parse (jsontext);"/>
									<outline text="console.log (&quot;readConfig: f == &quot; + f + &quot;, jstruct == &quot; + utils.jsonStringify (jstruct));" isComment="true"/>
									<outline text="for (var x in jstruct) {">
										<outline text="theConfig [x] = jstruct [x];"/>
										<outline text="}"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="catch (err) {">
									<outline text="console.log (&quot;readConfig: err.message == &quot; + err.message);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="callback ();"/>
							<outline text="});"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function startDavetwitter (httpRequestCallback) { //patch over a design problem in starting up davetwitter and davehttp -- 7/20/20 by DW ">
						<outline text="Changes" isComment="true">
							<outline text="1/27/21; 10:53:07 AM by DW">
								<outline text="Customized and streamlined for daveappserver."/>
								</outline>
							<outline text="7/20/20; 11:45:50 AM by DW">
								<outline text="Created. I made a mistake designing the interface to davetwitter. "/>
								<outline text="We're only passing config.twitter to davetwitter, so we make sure it has all the right elements to configure davehttp as well."/>
								<outline text="It's a mess. We should be able to set up davehttp here, it shouldn't be started in davetwitter. "/>
								<outline text="This can be dropped into any davetwitter-using app. possibly should be included in davetwitter itself at some point. "/>
								<outline text="Whew."/>
								</outline>
							</outline>
						<outline text="if (config.twitter === undefined) {">
							<outline text="config.twitter = new Object ();"/>
							<outline text="}"/>
							</outline>
						<outline text="config.twitter.myPort = config.port;"/>
						<outline text="config.twitter.httpPort = config.port;"/>
						<outline text="config.twitter.myDomain = config.myDomain;"/>
						<outline text="config.twitter.flLogToConsole = config.flLogToConsole;"/>
						<outline text="config.twitter.flAllowAccessFromAnywhere = config.flAllowAccessFromAnywhere;"/>
						<outline text="config.twitter.flPostEnabled = config.flPostEnabled;"/>
						<outline text="config.twitter.blockedAddresses = config.blockedAddresses;"/>
						<outline text="config.twitter.httpRequestCallback = httpRequestCallback;"/>
						<outline text="config.twitter.http404Callback = http404Callback; //1/24/21 by DW"/>
						<outline text="config.twitter.twitterConsumerKey = config.twitterConsumerKey;"/>
						<outline text="config.twitter.twitterConsumerSecret = config.twitterConsumerSecret;"/>
						<outline text="davetwitter.start (config.twitter);"/>
						<outline text="}"/>
						</outline>
					<outline text="function handleHttpRequest (theRequest) {">
						<outline text="Changes" isComment="true">
							<outline text="7/18/20; 10:55:45 AM by DW">
								<outline text="This is a callback for davetwitter. We get the first shot at any request. Return true if we consumed it, false otherwise."/>
								</outline>
							</outline>
						<outline text="const params = theRequest.params;"/>
						<outline text="const token = params.oauth_token;"/>
						<outline text="const secret = params.oauth_token_secret;"/>
						<outline text="const flprivate = (params.flprivate === undefined) ? false : utils.getBoolean (params.flprivate);"/>
						<outline text=""/>
						<outline text="stats.ctHits++;"/>
						<outline text="stats.ctHitsToday++;"/>
						<outline text="stats.ctHitsThisRun++;"/>
						<outline text="stats.whenLastHit = new Date ();"/>
						<outline text="statsChanged ();"/>
						<outline text=""/>
						<outline text="function returnPlainText (s) {">
							<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, s.toString ());"/>
							<outline text="}"/>
							</outline>
						<outline text="function returnData (jstruct) {">
							<outline text="if (jstruct === undefined) {">
								<outline text="jstruct = {};"/>
								<outline text="}"/>
								</outline>
							<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
							<outline text="}"/>
							</outline>
						<outline text="function returnHtml (htmltext) {">
							<outline text="theRequest.httpReturn (200, &quot;text/html&quot;, htmltext);"/>
							<outline text="}"/>
							</outline>
						<outline text="function returnXml (xmltext) {">
							<outline text="theRequest.httpReturn (200, &quot;text/xml&quot;, xmltext);"/>
							<outline text="}"/>
							</outline>
						<outline text="function returnNotFound () {">
							<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="function returnError (jstruct) {">
							<outline text="theRequest.httpReturn (500, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
							<outline text="}"/>
							</outline>
						<outline text="function httpReturn (err, jstruct) {">
							<outline text="if (err) {">
								<outline text="returnError (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="returnData (jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function httpReturnObject (err, jstruct) {">
							<outline text="if (err) {">
								<outline text="returnError (err);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="returnData (jstruct);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function returnServerHomePage () {">
							<outline text="request (config.urlServerHomePageSource, function (error, response, templatetext) {">
								<outline text="if (!error &amp;&amp; response.statusCode == 200) {">
									<outline text="var pagetable = {">
										<outline text="productName: config.productName, "/>
										<outline text="productNameForDisplay: config.productNameForDisplay, "/>
										<outline text="version: config.version,"/>
										<outline text="urlServerForClient: config.urlServerForClient,"/>
										<outline text="urlWebsocketServerForClient: config.urlWebsocketServerForClient,"/>
										<outline text="flEnableLogin: config.flEnableLogin,"/>
										<outline text="prefsPath: config.prefsPath,"/>
										<outline text="docsPath: config.docsPath"/>
										<outline text="};"/>
										</outline>
									<outline text="if (config.addMacroToPagetable !== undefined) {">
										<outline text="config.addMacroToPagetable (pagetable);"/>
										<outline text="}"/>
										</outline>
									<outline text="var pagetext = utils.multipleReplaceAll (templatetext, pagetable, false, &quot;[%&quot;, &quot;%]&quot;);"/>
									<outline text="returnHtml (pagetext);"/>
									<outline text="}"/>
									</outline>
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="function callWithScreenname (callback) {">
							<outline text="davetwitter.getScreenName (token, secret, function (screenname) {" created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784">
								<outline text="if (screenname === undefined) {" created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793">
									<outline text="returnError ({message: &quot;Can't do the thing you want because the accessToken is not valid.&quot;});    "/>
									<outline text="}" created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797"/>
									</outline>
								<outline text="else {" created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798">
									<outline text="callback (screenname);"/>
									<outline text="}" created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799"/>
									</outline>
								<outline text="});" created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text=""/>
						<outline text="if (config.httpRequest !== undefined) {">
							<outline text="theRequest.httpReturnObject = httpReturnObject;" isComment="true"/>
							<outline text="theRequest.returnData = returnData;" isComment="true"/>
							<outline text="theRequest.returnPlainText = returnPlainText;" isComment="true"/>
							<outline text="if (config.httpRequest (theRequest)) { //consumed by callback">
								<outline text="return (true);"/>
								<outline text="}"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="switch (theRequest.lowermethod) {">
							<outline text="case &quot;post&quot;:">
								<outline text="switch (theRequest.lowerpath) {">
									<outline text="case &quot;/publishfile&quot;: //1/22/21 by DW" created="Thu, 26 Jun 2014 11:33:59 GMT" pgfnum="42464">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="publishFile (screenname, params.relpath, params.type, flprivate, theRequest.postBody.toString (), function (err, data) {">
												<outline text="if (err) {">
													<outline text="returnError (err);"/>
													<outline text="}"/>
													</outline>
												<outline text="else { //quirk in API, it wants a string, not a JSON struct">
													<outline text="returnPlainText (utils.jsonStringify (data));"/>
													<outline text="}"/>
													</outline>
												<outline text="});"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="return (true);"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="case &quot;get&quot;:">
								<outline text="switch (theRequest.lowerpath) {">
									<outline text="case &quot;/&quot;:">
										<outline text="returnServerHomePage ();"/>
										<outline text="return (true);"/>
										</outline>
									<outline text="case &quot;/now&quot;:">
										<outline text="returnPlainText (new Date ());"/>
										<outline text="return (true);"/>
										</outline>
									<outline text="case &quot;/version&quot;:">
										<outline text="returnData ({">
											<outline text="productName: config.productName,"/>
											<outline text="version: config.version"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true);"/>
										</outline>
									<outline text="case &quot;/stats&quot;:">
										<outline text="returnData (stats);"/>
										<outline text="return (true);"/>
										</outline>
									<outline text="case &quot;/getfile&quot;:">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="getFile (screenname, params.relpath, flprivate, httpReturn);"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/getoptionalfile&quot;: ">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="getFile (screenname, params.relpath, flprivate, function (err, data) {">
												<outline text="if (err) {">
													<outline text="returnData ({}); //return nothing"/>
													<outline text="}"/>
													</outline>
												<outline text="else {">
													<outline text="returnData ({data});"/>
													<outline text="}"/>
													</outline>
												<outline text="});"/>
												</outline>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										</outline>
									<outline text="case &quot;/getfilelist&quot;: ">
										<outline text="callWithScreenname (function (screenname) {">
											<outline text="getFileList (screenname, flprivate, httpReturn);"/>
											<outline text="});"/>
											</outline>
										<outline text="return (true); " created="Wed, 22 Jan 2014 15:18:30 GMT" pgfnum="36266"/>
										<outline text="" isComment="true"/>
										<outline text="" isComment="true"/>
										<outline text="" isComment="true"/>
										<outline text="var accessToken = parsedUrl.query.oauth_token;" isComment="true" created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413"/>
										<outline text="var accessTokenSecret = parsedUrl.query.oauth_token_secret;" isComment="true" created="Mon, 21 Apr 2014 23:15:16 GMT" pgfnum="40413"/>
										<outline text="var flprivate = utils.getBoolean (parsedUrl.query.flprivate);" isComment="true" created="Mon, 04 Aug 2014 00:07:18 GMT" pgfnum="43127"/>
										<outline text="getScreenName (accessToken, accessTokenSecret, function (screenName) {" isComment="true" created="Wed, 09 Jul 2014 23:57:16 GMT" pgfnum="42784">
											<outline text="if (screenName === undefined) {" created="Thu, 10 Jul 2014 00:53:00 GMT" pgfnum="42793">
												<outline text="errorResponse ({message: &quot;Can't get the file list because the accessToken is not valid.&quot;});    "/>
												<outline text="}" created="Thu, 10 Jul 2014 00:53:11 GMT" pgfnum="42797"/>
												</outline>
											<outline text="else {" created="Thu, 10 Jul 2014 00:53:12 GMT" pgfnum="42798">
												<outline text="var s3path = getS3UsersPath (flprivate) + screenName + &quot;/&quot;;" created="Thu, 15 May 2014 15:40:17 GMT" pgfnum="41633"/>
												<outline text="console.log (&quot;/getfilelist: s3 path == &quot; + s3path); " isComment="true" created="Tue, 22 Jul 2014 13:24:40 GMT" pgfnum="43027"/>
												<outline text="getUserFileList (s3path, function (error, theList) {">
													<outline text="if (error) {">
														<outline text="errorResponse (error);    "/>
														<outline text="}"/>
														</outline>
													<outline text="else { ">
														<outline text="var returnedList = new Array (); //return a processed array -- 3/5/15 by DW"/>
														<outline text="for (var i = 0; i &lt; theList.length; i++) {">
															<outline text="var obj = new Object (), s3obj = theList [i];"/>
															<outline text="//set obj.path -- start copying into the object path when we pass the user's screen name">
																<outline text="var splitlist = s3obj.Key.split (&quot;/&quot;), flcopy = false, objectpath = &quot;&quot;;"/>
																<outline text="for (var j = 0; j &lt; splitlist.length; j++) {">
																	<outline text="if (flcopy) {">
																		<outline text="if (objectpath.length &gt; 0) {">
																			<outline text="objectpath += &quot;/&quot;;"/>
																			<outline text="}"/>
																			</outline>
																		<outline text="objectpath += splitlist [j];"/>
																		<outline text="}"/>
																		</outline>
																	<outline text="else {">
																		<outline text="if (splitlist [j] == screenName) {">
																			<outline text="flcopy = true;"/>
																			<outline text="}"/>
																			</outline>
																		<outline text="}"/>
																		</outline>
																	<outline text="}"/>
																	</outline>
																<outline text="obj.path = objectpath;"/>
																</outline>
															<outline text="obj.whenLastChange = s3obj.LastModified;"/>
															<outline text="obj.whenCreated = s3obj.whenCreated; //only present for filesystem objects --3/2/20 by DW"/>
															<outline text="obj.ctChars = s3obj.Size;"/>
															<outline text="returnedList [i] = obj;"/>
															<outline text="}"/>
															</outline>
														<outline text="dataResponse (returnedList);"/>
														<outline text="}"/>
														</outline>
													<outline text="});"/>
													</outline>
												<outline text="}" created="Thu, 10 Jul 2014 00:53:14 GMT" pgfnum="42799"/>
												</outline>
											<outline text="});" created="Wed, 09 Jul 2014 23:57:25 GMT" pgfnum="42785"/>
											</outline>
										<outline text="break; " isComment="true"/>
										</outline>
									<outline text="}"/>
									</outline>
								<outline text="break;"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (false);"/>
						<outline text="}"/>
						</outline>
					<outline text="function http404Callback (theRequest) {">
						<outline text="console.log (&quot;http404Callback: theRequest.path == &quot; + theRequest.path);" isComment="true"/>
						<outline text="if (config.flStorageEnabled) {">
							<outline text="if (checkPathForIllegalChars (theRequest.path)) {">
								<outline text="function return404 () {">
									<outline text="theRequest.httpReturn (404, &quot;text/plain&quot;, &quot;Not found.&quot;);"/>
									<outline text="}"/>
									</outline>
								<outline text="function returnPlainText (s) {">
									<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, s.toString ());"/>
									<outline text="}"/>
									</outline>
								<outline text="var path = utils.stringDelete (theRequest.path, 1, 1); //delete leading slash"/>
								<outline text="var screenname = utils.stringNthField (path, &quot;/&quot;, 1);"/>
								<outline text="var relpath = utils.stringDelete (path, 1, screenname.length + 1);"/>
								<outline text="var flprivate = false;"/>
								<outline text="getFile (screenname, relpath, flprivate, function (err, data) {">
									<outline text="if (err) {">
										<outline text="return404 ();"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="returnPlainText (data.filedata);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="return404 ();"/>
								<outline text="}"/>
								</outline>
							<outline text="return (true); //tell davetwitter we handled it"/>
							<outline text="}"/>
							</outline>
						<outline text="else {">
							<outline text="return (false); //tell davetwitter we didn't handle it"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function everyMinute () {">
						<outline text="var now = new Date ();"/>
						<outline text="if (config.everyMinute !== undefined) {">
							<outline text="config.everyMinute ();"/>
							<outline text="}"/>
							</outline>
						<outline text="if (now.getMinutes () == 0) {">
							<outline text="console.log (&quot;\n&quot; + now.toLocaleTimeString () + &quot;: &quot; + config.productName + &quot; v&quot; + config.version + &quot; running on port &quot; + config.port + &quot;.\n&quot;);"/>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text="function everySecond () {">
						<outline text="if (flStatsChanged) {">
							<outline text="stats.ctWrites++;"/>
							<outline text="flStatsChanged = false;"/>
							<outline text="fs.writeFile (fnameStats, utils.jsonStringify (stats), function () {">
								<outline text="});"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="}"/>
						</outline>
					<outline text=""/>
					<outline text="utils.copyScalars (options, config); //1/22/21 by DW"/>
					<outline text="readConfig (fnameConfig, config, true, function () { //anything can be overridden by config.json">
						<outline text="readConfig (fnameStats, stats, false, function () {">
							<outline text="if (process.env.PORT !== undefined) { //8/6/20 by DW">
								<outline text="config.port = process.env.PORT;"/>
								<outline text="}"/>
								</outline>
							<outline text="stats.ctStarts++;"/>
							<outline text="stats.ctHitsThisRun = 0;"/>
							<outline text="stats.whenLastStart = whenStart;"/>
							<outline text="statsChanged ();"/>
							<outline text="console.log (&quot;\n&quot; + config.productName + &quot; v&quot; + config.version + &quot; running on port &quot; + config.port + &quot;.\n&quot;);"/>
							<outline text="console.log (&quot;config == &quot; + utils.jsonStringify (config)); "/>
							<outline text="startDavetwitter (handleHttpRequest);"/>
							<outline text="if (config.myDomain === undefined) {">
								<outline text="console.log (&quot;startup: can't start the server because config.myDomain is not defined.&quot;);"/>
								<outline text="}"/>
								</outline>
							<outline text="else {">
								<outline text="config.urlServerForClient = &quot;http://&quot; + config.myDomain + &quot;/&quot;;"/>
								<outline text="config.urlWebsocketServerForClient = &quot;ws://&quot; + utils.stringNthField (config.myDomain, &quot;:&quot;, 1) + &quot;:&quot; + config.websocketPort + &quot;/&quot;;"/>
								<outline text="webSocketStartup (); "/>
								<outline text="setInterval (everySecond, 1000); "/>
								<outline text="utils.runEveryMinute (everyMinute); "/>
								<outline text="if (callback !== undefined) {">
									<outline text="callback (config);"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="});"/>
							</outline>
						<outline text="});"/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="example/package.json">
				<outline text="{">
					<outline text="&quot;name&quot;: &quot;testdaveappserver&quot;,"/>
					<outline text="&quot;description&quot;: &quot;Bare bones demo app for daveappserver package.&quot;,"/>
					<outline text="&quot;author&quot;: &quot;Dave Winer &lt;dave@scripting.com&gt;&quot;,"/>
					<outline text="&quot;license&quot;: &quot;MIT&quot;,"/>
					<outline text="&quot;version&quot;: &quot;0.4.0&quot;,"/>
					<outline text="&quot;dependencies&quot; : {">
						<outline text="&quot;daveutils&quot;: &quot;*&quot;,"/>
						<outline text="&quot;davefilesystem&quot;: &quot;*&quot;,"/>
						<outline text="&quot;daveappserver&quot;: &quot;*&quot;"/>
						<outline text="} "/>
						</outline>
					<outline text="}"/>
					</outline>
				</outline>
			<outline text="example/app.js">
				<outline text="const daveappserver = require (&quot;./lib/daveappserver.js&quot;); "/>
				<outline text="const daveappserver = require (&quot;daveappserver&quot;); " isComment="true"/>
				<outline text="const utils = require (&quot;daveutils&quot;); "/>
				<outline text=""/>
				<outline text="var stats = {">
					<outline text="ctslogans: 0,"/>
					<outline text="whenLastSlogan: undefined"/>
					<outline text="};"/>
					</outline>
				<outline text="var options = {">
					<outline text="everySecond: function () {">
						<outline text="},"/>
						</outline>
					<outline text="everyMinute: function () {">
						<outline text="},"/>
						</outline>
					<outline text="httpRequest: function (theRequest) {">
						<outline text="var now = new Date ();"/>
						<outline text="function returnPlainText (s) {">
							<outline text="theRequest.httpReturn (200, &quot;text/plain&quot;, s.toString ());"/>
							<outline text="}"/>
							</outline>
						<outline text="function returnData (jstruct) {">
							<outline text="if (jstruct === undefined) {">
								<outline text="jstruct = {};"/>
								<outline text="}"/>
								</outline>
							<outline text="theRequest.httpReturn (200, &quot;application/json&quot;, utils.jsonStringify (jstruct));"/>
							<outline text="}"/>
							</outline>
						<outline text="switch (theRequest.lowerpath) {">
							<outline text="case &quot;/slogan&quot;:">
								<outline text="stats.ctslogans++;"/>
								<outline text="stats.whenLastSlogan = now;"/>
								<outline text="daveappserver.saveStats (stats);"/>
								<outline text="returnData ({slogan: utils.getRandomSnarkySlogan ()});"/>
								<outline text="return (true);"/>
								</outline>
							<outline text="}"/>
							</outline>
						<outline text="return (false); //not consumed"/>
						<outline text="}"/>
						</outline>
					<outline text="}"/>
					</outline>
				<outline text="daveappserver.start (options);"/>
				</outline>
			<outline text="example/index.html">
				<outline text="&lt;html&gt;">
					<outline text="&lt;head&gt;">
						<outline text="&lt;title&gt;[%productNameForDisplay%]&lt;/title&gt;"/>
						<outline text="&lt;meta http-equiv=&quot;Content-Type&quot; content=&quot;text/html; charset=utf-8&quot;&gt;"/>
						<outline text="&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width, initial-scale=1.0&quot;&gt;"/>
						<outline text=""/>
						<outline text="&lt;!-- Facebook metadata --&gt;" isComment="true">
							<outline text="&lt;meta property=&quot;og:url&quot; content=&quot;[%metaUrl%]&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:type&quot; content=&quot;website&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:title&quot; content=&quot;[%metaTitle%]&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:description&quot; content=&quot;[%metaDescription%]&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:image&quot; content=&quot;[%metaImgUrl%]&quot; /&gt;"/>
							<outline text="&lt;meta property=&quot;og:site_name&quot; content=&quot;[%metaSiteName%]&quot; /&gt;"/>
							</outline>
						<outline text="&lt;!-- Twitter metadata --&gt;" isComment="true">
							<outline text="&lt;meta name=&quot;twitter:card&quot; content=&quot;summary_large_image&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:site&quot; content=&quot;@[%metaTwitterScreenName%]&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:title&quot; content=&quot;[%metaTitle%]&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:url&quot; content=&quot;[%metaUrl%]&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:description&quot; content=&quot;[%metaDescription%]&quot;&gt;"/>
							<outline text="&lt;meta name=&quot;twitter:image:src&quot; content=&quot;[%metaImgUrl%]&quot;&gt;"/>
							</outline>
						<outline text=""/>
						<outline text="&lt;%basicIncludes2%&gt;"/>
						<outline text=""/>
						<outline text="&lt;script src=&quot;http://fargo.io/code/storage/api.js&quot;&gt;&lt;/script&gt;" created="Thu, 08 May 2014 14:04:18 GMT" pgfnum="41269"/>
						<outline text=""/>
						<outline text="&lt;style&gt;">
							<outline text="body {">
								<outline text="font-family: Ubuntu;"/>
								<outline text="font-size: 20px;"/>
								<outline text="background-color: whitesmoke;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divPageBody {">
								<outline text="margin-top: 200px;"/>
								<outline text="width: 50%;"/>
								<outline text="margin-left: auto;"/>
								<outline text="margin-right: auto;"/>
								<outline text="}"/>
								</outline>
							<outline text=".divVersionNumber {">
								<outline text="font-size: 12px;"/>
								<outline text="color: &lt;%uiTextColor%&gt;;" isComment="true"/>
								<outline text="float: right;"/>
								<outline text="padding: 19px;"/>
								<outline text="}"/>
								</outline>
							<outline text="&lt;/style&gt;"/>
							</outline>
						<outline text="&lt;script&gt;">
							<outline text="var appConsts = {">
								<outline text="productname: &quot;[%productName%]&quot;,"/>
								<outline text="productnameForDisplay: &quot;[%productNameForDisplay%]&quot;,"/>
								<outline text="version: &quot;[%version%]&quot;,"/>
								<outline text="urlTwitterServer: &quot;[%urlServerForClient%]&quot;,"/>
								<outline text="urlSocketServer: &quot;[%urlWebsocketServerForClient%]&quot;,"/>
								<outline text="flEnableLogin: [%flEnableLogin%],"/>
								<outline text="flUseSockets: true"/>
								<outline text="urlServer: &quot;http://localhost:1420/&quot;" isComment="true"/>
								<outline text="}"/>
								</outline>
							<outline text="var appPrefs = {">
								<outline text="ctStartups: 0,"/>
								<outline text="whenLastStartup: undefined,"/>
								<outline text="lastPublishedText: &quot;&quot;"/>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="var myNodeStorageApp = undefined;"/>
							<outline text=""/>
							<outline text="function prefsChanged () {">
								<outline text="myNodeStorageApp.prefsChanged ();"/>
								<outline text="}"/>
								</outline>
							<outline text="function httpRequest (url, timeout, headers, callback) {">
								<outline text="Changes" isComment="true">
									<outline text="7/20/20; 5:36:14 PM by DW">
										<outline text="Finally, I need a HTTP request routine that calls back in a standard way.">
											<outline text="function (err, data)"/>
											</outline>
										<outline text="No, I don't want to use promises."/>
										<outline text="for info about timeous see this page." isComment="true">
											<outline text="http://stackoverflow.com/questions/3543683/determine-if-ajax-error-is-a-timeout"/>
											</outline>
										</outline>
									</outline>
								<outline text="timeout = (timeout === undefined) ? 30000 : timeout;"/>
								<outline text="var jxhr = $.ajax ({ ">
									<outline text="url: url,"/>
									<outline text="dataType: &quot;text&quot;, "/>
									<outline text="headers," created="Tue, 14 May 2013 14:35:06 GMT" pgfnum="23850"/>
									<outline text="timeout"/>
									<outline text="}) "/>
									</outline>
								<outline text=".success (function (data, status) { ">
									<outline text="callback (undefined, data);"/>
									<outline text="}) "/>
									</outline>
								<outline text=".error (function (status) { ">
									<outline text="var err = {">
										<outline text="code: status.status,"/>
										<outline text="message: JSON.parse (status.responseText).message"/>
										<outline text="};"/>
										</outline>
									<outline text="callback (err);"/>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="function servercall (path, params, flAuthenticated, callback) {">
								<outline text="Changes" isComment="true">
									<outline text="1/11/21; 12:51:47 PM by DW">
										<outline text="New param, flAuthenticated. If true we add the oAuth info to the call. "/>
										</outline>
									</outline>
								<outline text="if (params === undefined) {">
									<outline text="params = new Object ();"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="if (flAuthenticated) { //1/11/21 by DW">
									<outline text="params.oauth_token = localStorage.twOauthToken;"/>
									<outline text="params.oauth_token_secret = localStorage.twOauthTokenSecret;"/>
									<outline text="}"/>
									</outline>
								<outline text=""/>
								<outline text="var url = appConsts.urlServer + path + &quot;?&quot; + twBuildParamList (params, false);" created="Sat, 09 Aug 2014 16:02:57 GMT" pgfnum="43215"/>
								<outline text="console.log (&quot;servercall: url == &quot; + url); //1/18/21 by DW"/>
								<outline text="httpRequest (url, undefined, undefined, function (err, jsontext) {">
									<outline text="if (err) {">
										<outline text="callback (err);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="callback (undefined, JSON.parse (jsontext));"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="function getSlogan (callback) {">
								<outline text="servercall (&quot;slogan&quot;, undefined, false, callback);"/>
								<outline text="}"/>
								</outline>
							<outline text="function viewSlogan () {">
								<outline text="getSlogan (function (err, jstruct) {">
									<outline text="if (err) {">
										<outline text="alertDialog (err.message);"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="alertDialog (jstruct.slogan);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="function uploadFile (path, filetext, type, flprivate, callback) {">
								<outline text="twUploadFile (path, filetext, type, flprivate, function (data) {">
									<outline text="console.log (&quot;uploadFile: data == &quot; + jsonStringify (data));"/>
									<outline text="if (callback !== undefined) {">
										<outline text="callback (data);"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="function testUploadFile () {">
								<outline text="askDialog (&quot;Text you would like to publish:&quot;, appPrefs.lastPublishedText, &quot;Some text you'd like to publish.&quot;, function (theText, flcancel) {" created="Tue, 08 Jan 2013 01:26:19 GMT" pgfnum="16860">
									<outline text="if (!flcancel) {">
										<outline text="appPrefs.lastPublishedText = theText;"/>
										<outline text="prefsChanged ();"/>
										<outline text="uploadFile (&quot;testfile.txt&quot;, theText, &quot;text/plain&quot;, false, function (data) {">
											<outline text="window.open (data.url);"/>
											<outline text="});"/>
											</outline>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text=""/>
							<outline text="function updateTwitterLogin () {">
								<outline text="if (appConsts.flEnableLogin) {">
									<outline text="initTwitterMenuItems ();"/>
									<outline text="}"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="function everySecond () {">
								<outline text="updateTwitterLogin ()"/>
								<outline text="}"/>
								</outline>
							<outline text="function startup () {">
								<outline text="console.log (&quot;startup&quot;);"/>
								<outline text="myNodeStorageApp = new nodeStorageApp (appConsts, appPrefs);"/>
								<outline text="myNodeStorageApp.everySecond = everySecond;"/>
								<outline text="myNodeStorageApp.start (function (flConnected) {">
									<outline text="if (flConnected) {">
										<outline text="appPrefs.ctStartups++;"/>
										<outline text="appPrefs.whenLastStartup = new Date ();"/>
										<outline text="prefsChanged ();"/>
										<outline text="}"/>
										</outline>
									<outline text="else {">
										<outline text="updateTwitterLogin ();"/>
										<outline text="}"/>
										</outline>
									<outline text="});"/>
									</outline>
								<outline text="}"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/head&gt;"/>
						</outline>
					<outline text="&lt;body&gt;">
						<outline text="&lt;div class=&quot;divMenubar&quot; id=&quot;idMenubar&quot;&gt;" created="Thu, 28 Mar 2013 21:39:05 GMT" pgfnum="21615">
							<outline text="&lt;div class=&quot;topbar-wrapper&quot; style=&quot;z-index: 5;&quot;&gt;">
								<outline text="&lt;div class=&quot;navbar navbar-fixed-top&quot; data-dropdown=&quot;dropdown&quot;&gt;">
									<outline text="&lt;div class=&quot;divVersionNumber&quot; id=&quot;idVersionNumber&quot;&gt;">
										<outline text="[%version%]"/>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;div class=&quot;navbar-inner&quot;&gt;">
										<outline text="&lt;div class=&quot;container&quot;&gt;">
											<outline text="&lt;a class=&quot;brand&quot; onclick=&quot;clickHome ()&quot;&gt;&lt;span id=&quot;idMenuProductName&quot;&gt;[%productNameForDisplay%]&lt;/span&gt;&lt;/a&gt;"/>
											<outline text="&lt;ul class=&quot;nav&quot; id=&quot;idMainMenuList&quot;&gt;">
												<outline text="&lt;li class=&quot;dropdown&quot; id=&quot;idMainMenu&quot;&gt; ">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;Menu&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;viewSlogan ()&quot;&gt;Slogan...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;testUploadFile ()&quot;&gt;Publish...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;alertDialog ('One')&quot;&gt;One...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;alertDialog ('Two')&quot;&gt;Two...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;alertDialog ('Three')&quot;&gt;Three...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;/ul&gt;"/>
												</outline>
											<outline text="&lt;ul class=&quot;nav pull-right&quot;&gt;">
												<outline text="&lt;li class=&quot;dropdown&quot;&gt;">
													<outline text="&lt;a href=&quot;#&quot; class=&quot;dropdown-toggle&quot; data-toggle=&quot;dropdown&quot;&gt;&lt;span id=&quot;idTwitterIcon&quot;&gt;&lt;/span&gt;&lt;span id=&quot;idTwitterUsername&quot;&gt;&lt;/span&gt;&amp;nbsp;&lt;b class=&quot;caret&quot;&gt;&lt;/b&gt;&lt;/a&gt;"/>
													<outline text="&lt;ul class=&quot;dropdown-menu&quot;&gt;">
														<outline text="&lt;li&gt;&lt;a onclick=&quot;aboutDialog ();&quot;&gt;About &lt;span id=&quot;idMenuAboutProductName&quot;&gt;&lt;/span&gt;...&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;" isComment="true"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;showPrefsDialog ();&quot;&gt;Settings...&lt;/a&gt;&lt;/li&gt;" isComment="true"/>
														<outline text="&lt;li class=&quot;divider&quot;&gt;&lt;/li&gt;"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;fbToggleConnectCommand ();&quot; id=&quot;idFacebookConnectMenuItem&quot;&gt;&lt;/a&gt;&lt;/li&gt;" isComment="true"/>
														<outline text="&lt;li&gt;&lt;a onclick=&quot;twToggleConnectCommand ();&quot; id=&quot;idTwitterConnectMenuItem&quot;&gt;&lt;/a&gt;&lt;/li&gt;"/>
														<outline text="&lt;/ul&gt;"/>
														</outline>
													<outline text="&lt;/li&gt;"/>
													</outline>
												<outline text="&lt;/ul&gt;"/>
												</outline>
											<outline text="&lt;/div&gt;"/>
											</outline>
										<outline text="&lt;/div&gt;"/>
										</outline>
									<outline text="&lt;/div&gt;"/>
									</outline>
								<outline text="&lt;/div&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;" created="Thu, 28 Mar 2013 21:39:17 GMT" pgfnum="21616"/>
							</outline>
						<outline text=""/>
						<outline text="&lt;div class=&quot;divPageBody&quot;&gt;">
							<outline text="&lt;center&gt;">
								<outline text="&lt;p&gt;This is the home page for an example app for &lt;a href=&quot;https://github.com/scripting/appServer&quot;&gt;daveAppServer&lt;/a&gt;.&lt;/p&gt;"/>
								<outline text="&lt;/center&gt;"/>
								</outline>
							<outline text="&lt;/div&gt;"/>
							</outline>
						<outline text=""/>
						<outline text="&lt;script&gt;">
							<outline text="$(document).ready (function () {">
								<outline text=""/>
								<outline text="startup ();" created="Wed, 30 Oct 2013 15:20:06 GMT" pgfnum="30656"/>
								<outline text="});"/>
								</outline>
							<outline text="&lt;/script&gt;"/>
							</outline>
						<outline text="&lt;/body&gt;"/>
						</outline>
					<outline text="&lt;/html&gt;"/>
					</outline>
				</outline>
			<outline text="example/config.json" isComment="true">
				<outline text="{">
					<outline text="&quot;productName&quot;: &quot;testDaveAppserver&quot;,"/>
					<outline text="&quot;productNameForDisplay&quot;: &quot;Example App&quot;,"/>
					<outline text=""/>
					<outline text="&quot;urlServerHomePageSource&quot;: &quot;http://scripting.com/code/daveappserver/example/index.html&quot;,"/>
					<outline text=""/>
					<outline text="&quot;prefsPath&quot;: &quot;prefs.json&quot;,"/>
					<outline text="&quot;docsPath&quot;: &quot;myDocs/&quot;,"/>
					<outline text=""/>
					<outline text="&quot;port&quot;: 1420,"/>
					<outline text="&quot;flWebsocketEnabled&quot;: true,"/>
					<outline text="&quot;websocketPort&quot;: 1421,"/>
					<outline text=""/>
					<outline text="&quot;myDomain&quot;: &quot;localhost:1420&quot;,"/>
					<outline text=""/>
					<outline text="&quot;twitterConsumerKey&quot;: &quot;abcdefghijklmnopqrstufwxy&quot;,"/>
					<outline text="&quot;twitterConsumerSecret&quot;: &quot;abcdefghijklmnopqrstufwxyabcdefghijklmnopqrstufwxy&quot;"/>
					<outline text="}"/>
					</outline>
				</outline>
			</outline>
		<outline text="build script">
			<outline text="nodeEditorSuite.utilities.buildDaveAppServer ()"/>
			</outline>
		</body>
	</opml>
